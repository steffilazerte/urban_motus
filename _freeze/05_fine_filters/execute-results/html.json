{
  "hash": "a664861f5d61dc2a270f4b0cd9e4900a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Fine-scale Filtering\nfreeze: auto\n---\n\n\nHere we perform fine-scale filtering which involves more assessments of potential issues. \n\nMany of these steps rely on hit-level data, as opposed to run-level data from the\nprevious steps.\n\n## Setup\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"XX_setup.R\")\nnoise_runs <- open_dataset(\"Data/Datasets/noise_runs.feather\", format = \"feather\")\n\nruns <- open_dataset(\"Data/Datasets/runs\", format = \"feather\") |>\n  anti_join(noise_runs)\n\nhits <- load_hits() |>\n  map(\\(x) anti_join(x, noise_runs, by = c(\"runID\", \"recvDeployID\", \"tagDeployID\")))\n```\n:::\n\n\nWe'll also use a modified version of the motusFilter[^1], such that \nhits from SENSORGNOME stations with a `freqSD > 0.1` will be considered 'bad' data \n(i.e., we'll set the motusFilter value to 0 for these hits).\n\n[^1]: Based on notes from Amie MacDonald's scripts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhits <- map(hits, \\(x) {\n  mutate(x, motusFilter = if_else(recvType == \"SENSORGNOME\" & freqSD > 0.1, 0, motusFilter))\n})\n```\n:::\n\n\n\n\n## Bad Tags[^1]\n\nFirst, we'll collect individual tags which have *only* bad data (i.e. all 0)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_tags <- map(hits, \\(x) {\n  noise <- x |>\n    select(\"tagID\", \"tagDeployID\", \"motusFilter\") |>\n    summarize(motusFilter = sum(motusFilter, na.rm = TRUE), .by = c(\"tagID\", \"tagDeployID\")) |>\n    filter(motusFilter == 0)\n  \n  semi_join(x, noise, by = c(\"tagID\", \"tagDeployID\")) |>\n    select(\"runID\", \"tagDeployID\", \"recvDeployID\") |>\n    collect()\n}) |> list_rbind()\n```\n:::\n\n\n## Bad Runs[^1]\n\nNow we'll calculate the proportion of good/bad data per tag, per receiver, per day. \n\n- We'll omit all runs on a day for this tag/receiver combo where less than half are 'good'\n   \n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_quality <- map(hits, \\(x) {\n  noise <- x |>\n    select(\"date\", \"runID\", \"tagID\", \"tagDeployID\", \"recvDeployID\", \"motusFilter\") |>\n    summarize(p_good = sum(motusFilter, na.rm = TRUE) / n(),\n              .by = c(\"tagID\", \"tagDeployID\", \"recvDeployID\", \"date\")) |>\n    filter(p_good <= 0.5) |>\n    distinct()\n  \n  semi_join(x, noise, by = c(\"tagID\", \"tagDeployID\", \"recvDeployID\", \"date\")) |>\n    select(\"runID\", \"tagDeployID\", \"recvDeployID\") |>\n    collect()\n}) |> list_rbind()\n```\n:::\n\n## Ambiguous detections\n\nLet's collect all runs where there is some ambiguity. We'll look at the `allruns` table for this.\n\n::: {.cell}\n\n```{.r .cell-code}\nambig_ids <- map(dbs, \\(x) {\n  t <- tbl(x, \"allruns\") |>\n    filter(!is.na(ambigID)) |>\n    select(\"runID\", \"tagID\" = \"motusTagID\", \"ambigID\") |>\n    distinct() |>\n    collect() |>\n    mutate(is_ambig = TRUE)\n  if(nrow(t) == 0) t <- NULL\n  t\n})|> \n  list_rbind(names_to = \"proj_id\") |>\n  mutate(proj_id = as.integer(proj_id))\n```\n:::\n\n\nNow let's see if any of these runs are even left in our data after filtering...\n\n::: {.cell}\n\n```{.r .cell-code}\nruns |>\n  anti_join(noise_tags) |>\n  anti_join(noise_quality) |>\n  semi_join(ambig_ids) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 29\n# ℹ 29 variables: runID <int>, tsBegin <dbl>, tsEnd <dbl>, done <int>,\n#   tagID <int>, ant <chr>, len <int>, nodeNum <chr>, motusFilter <dbl>,\n#   tagDeployID <int>, speciesID <int>, tsStartTag <dbl>, tsEndTag <dbl>,\n#   test <int>, batchID <int>, recvDeviceID <int>, recvDeployID <int>,\n#   tsStartRecv <dbl>, tsEndRecv <dbl>, recvType <chr>, recvDeployLat <dbl>,\n#   recvDeployLon <dbl>, timeBegin <dttm>, timeEnd <dttm>, dateBegin <date>,\n#   dateEnd <date>, monthBegin <dbl>, yearBegin <dbl>, proj_id <int>\n```\n\n\n:::\n:::\n\n\nThere are no ambiguous runs left the data after we cleaned, so we'll just ignore them for now.\n\n\n## Looking at the filters\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_hits <- bind_rows(noise_tags, noise_quality) |>\n  select(\"runID\", \"tagDeployID\", \"recvDeployID\") |>\n  distinct()\n\nnoise_hits\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 338,272 × 3\n       runID tagDeployID recvDeployID\n       <int>       <int>        <int>\n 1 491015464       41214         8415\n 2 491016044       41214         8415\n 3 491016057       41214         8415\n 4 491221057       44340         8415\n 5 491221058       44339         8415\n 6 491221059       44339         8415\n 7 491221071       44340         8415\n 8 491221093       44339         8415\n 9 491221094       44339         8415\n10 491221102       44340         8415\n# ℹ 338,262 more rows\n```\n\n\n:::\n:::\n\n\nNext we'll take a look at how this compares to the motusFilter\n\nWith only the runs filtering\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(runs, proj_id, motusFilter) |>\n  collect() |>\n  pivot_wider(names_from = motusFilter, values_from = n) |>\n  arrange(proj_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 3\n   proj_id    `0`    `1`\n     <int>  <int>  <int>\n 1     168 148857 267523\n 2     352 267425 766855\n 3     364  14453   1617\n 4     373 292145 477672\n 5     393  49839  25294\n 6     417 354220 604562\n 7     464  31519    556\n 8     484 492931 601907\n 9     515 153426  29846\n10     551 641404 625166\n11     607    427      4\n```\n\n\n:::\n:::\n\n\nWith both the runs and hit filtering\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(runs, noise_hits, by = c(\"runID\", \"tagDeployID\", \"recvDeployID\")) |>\n  count(proj_id, motusFilter) |>\n  collect() |>\n  pivot_wider(names_from = motusFilter, values_from = n) |>\n  arrange(proj_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 3\n   proj_id    `0`    `1`\n     <int>  <int>  <int>\n 1     168 118672 267235\n 2     352 229604 765764\n 3     364   7799   1584\n 4     373 267387 476839\n 5     393  42674  25021\n 6     417 315663 603126\n 7     464  16293    472\n 8     484 483676 601017\n 9     515 149450  29753\n10     551 489385 619025\n11     607    172      4\n```\n\n\n:::\n:::\n\n\nThere are still many 'bad' data according to the motusFilter... but we are \ndefinitely getting closer.\n\n\n## Saving filters\n\nWe'll save the 'bad data' for use in the next steps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_feather(noise_hits, sink = \"Data/Datasets/noise_hits.feather\")\n```\n:::\n\n\n## Wrap up\nDisconnect from the databases\n\n::: {.cell}\n\n```{.r .cell-code}\nwalk(dbs, dbDisconnect)\n```\n:::\n\n\n## Reproducibility\n\n\n:::{.callout-note collapse=true}\n### Session Info\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.3 (2024-02-29)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language en_CA:en\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Winnipeg\n date     2024-04-24\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package       * version  date (UTC) lib source\n arrow         * 13.0.0.1 2023-09-22 [1] CRAN (R 4.3.1)\n assertr       * 3.0.0    2022-11-05 [1] CRAN (R 4.3.0)\n assertthat      0.2.1    2019-03-21 [1] CRAN (R 4.3.0)\n bit             4.0.5    2022-11-15 [1] CRAN (R 4.3.0)\n bit64           4.0.5    2020-08-30 [1] CRAN (R 4.3.0)\n blob            1.2.4    2023-03-17 [1] CRAN (R 4.3.0)\n cachem          1.0.8    2023-05-01 [1] CRAN (R 4.3.0)\n class           7.3-22   2023-05-03 [4] CRAN (R 4.3.1)\n classInt        0.4-10   2023-09-05 [1] CRAN (R 4.3.1)\n cli             3.6.2    2023-12-11 [1] CRAN (R 4.3.2)\n codetools       0.2-19   2023-02-01 [4] CRAN (R 4.2.2)\n colorspace      2.1-0    2023-01-23 [1] CRAN (R 4.3.0)\n DBI           * 1.2.2    2024-02-16 [1] CRAN (R 4.3.2)\n dbplyr          2.4.0    2023-10-26 [1] CRAN (R 4.3.1)\n devtools        2.4.5    2022-10-11 [1] CRAN (R 4.3.0)\n digest          0.6.34   2024-01-11 [1] CRAN (R 4.3.2)\n dplyr         * 1.1.4    2023-11-17 [1] CRAN (R 4.3.2)\n e1071           1.7-14   2023-12-06 [1] CRAN (R 4.3.2)\n ebirdst       * 3.2022.2 2024-01-15 [1] Github (ebird/ebirdst@bd409c7)\n ellipsis        0.3.2    2021-04-29 [1] CRAN (R 4.3.0)\n evaluate        0.23     2023-11-01 [1] CRAN (R 4.3.1)\n fansi           1.0.6    2023-12-08 [1] CRAN (R 4.3.2)\n fastmap         1.1.1    2023-02-24 [1] CRAN (R 4.3.0)\n forcats       * 1.0.0    2023-01-29 [1] CRAN (R 4.3.0)\n fs              1.6.3    2023-07-20 [1] CRAN (R 4.3.1)\n generics        0.1.3    2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2       * 3.5.0    2024-02-23 [1] CRAN (R 4.3.2)\n ggrepel       * 0.9.5    2024-01-10 [1] CRAN (R 4.3.2)\n glue            1.7.0    2024-01-09 [1] CRAN (R 4.3.2)\n gt            * 0.10.0   2023-10-07 [1] CRAN (R 4.3.1)\n gtable          0.3.4    2023-08-21 [1] CRAN (R 4.3.1)\n hms             1.1.3    2023-03-21 [1] CRAN (R 4.3.0)\n htmltools       0.5.7    2023-11-03 [1] CRAN (R 4.3.1)\n htmlwidgets     1.6.4    2023-12-06 [1] CRAN (R 4.3.2)\n httpuv          1.6.14   2024-01-26 [1] CRAN (R 4.3.2)\n httr            1.4.7    2023-08-15 [1] CRAN (R 4.3.1)\n jsonlite        1.8.8    2023-12-04 [1] CRAN (R 4.3.2)\n KernSmooth      2.23-22  2023-07-10 [1] CRAN (R 4.3.1)\n knitr           1.45     2023-10-30 [1] CRAN (R 4.3.1)\n later           1.3.2    2023-12-06 [1] CRAN (R 4.3.2)\n lifecycle       1.0.4    2023-11-07 [1] CRAN (R 4.3.2)\n lubridate     * 1.9.3    2023-09-27 [1] CRAN (R 4.3.1)\n magrittr        2.0.3    2022-03-30 [1] CRAN (R 4.3.0)\n memoise         2.0.1    2021-11-26 [1] CRAN (R 4.3.0)\n mime            0.12     2021-09-28 [1] CRAN (R 4.3.0)\n miniUI          0.1.1.1  2018-05-18 [1] CRAN (R 4.3.0)\n motus         * 6.1.0    2024-02-01 [1] Github (motuswts/motus@9d99ed5)\n munsell         0.5.0    2018-06-12 [1] CRAN (R 4.3.0)\n naturecounts    0.4.0    2023-06-20 [1] local\n pillar          1.9.0    2023-03-22 [1] CRAN (R 4.3.0)\n pkgbuild        1.4.3    2023-12-10 [1] CRAN (R 4.3.2)\n pkgconfig       2.0.3    2019-09-22 [1] CRAN (R 4.3.0)\n pkgload         1.3.3    2023-09-22 [1] CRAN (R 4.3.1)\n profvis         0.3.8    2023-05-02 [1] CRAN (R 4.3.1)\n promises        1.2.1    2023-08-10 [1] CRAN (R 4.3.1)\n proxy           0.4-27   2022-06-09 [1] CRAN (R 4.3.0)\n purrr         * 1.0.2    2023-08-10 [1] CRAN (R 4.3.1)\n R6              2.5.1    2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp            1.0.12   2024-01-09 [1] CRAN (R 4.3.2)\n readr         * 2.1.5    2024-01-10 [1] CRAN (R 4.3.2)\n remotes         2.4.2.1  2023-07-18 [1] CRAN (R 4.3.2)\n rlang           1.1.3    2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown       2.25     2023-09-18 [1] CRAN (R 4.3.1)\n rnaturalearth * 1.0.1    2023-12-15 [1] CRAN (R 4.3.2)\n RSQLite         2.3.5    2024-01-21 [1] CRAN (R 4.3.2)\n rstudioapi      0.15.0   2023-07-07 [1] CRAN (R 4.3.1)\n scales          1.3.0    2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo     1.2.2    2021-12-06 [1] CRAN (R 4.3.0)\n sf            * 1.0-15   2023-12-18 [1] CRAN (R 4.3.2)\n shiny           1.8.0    2023-11-17 [1] CRAN (R 4.3.2)\n stringi         1.8.3    2023-12-11 [1] CRAN (R 4.3.2)\n stringr       * 1.5.1    2023-11-14 [1] CRAN (R 4.3.2)\n terra           1.7-71   2024-01-31 [1] CRAN (R 4.3.2)\n tibble        * 3.2.1    2023-03-20 [1] CRAN (R 4.3.0)\n tidyr         * 1.3.1    2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect      1.2.0    2022-10-10 [1] CRAN (R 4.3.0)\n timechange      0.3.0    2024-01-18 [1] CRAN (R 4.3.2)\n tzdb            0.4.0    2023-05-12 [1] CRAN (R 4.3.1)\n units         * 0.8-5    2023-11-28 [1] CRAN (R 4.3.2)\n urlchecker      1.0.1    2021-11-30 [1] CRAN (R 4.3.0)\n usethis         2.2.2    2023-07-06 [1] CRAN (R 4.3.1)\n utf8            1.2.4    2023-10-22 [1] CRAN (R 4.3.1)\n vctrs           0.6.5    2023-12-01 [1] CRAN (R 4.3.2)\n withr           3.0.0    2024-01-16 [1] CRAN (R 4.3.2)\n xfun            0.42     2024-02-08 [1] CRAN (R 4.3.2)\n xml2            1.3.6    2023-12-04 [1] CRAN (R 4.3.2)\n xtable          1.8-4    2019-04-21 [1] CRAN (R 4.3.0)\n yaml            2.3.8    2023-12-11 [1] CRAN (R 4.3.2)\n\n [1] /home/steffi/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n:::\n\n",
    "supporting": [
      "05_fine_filters_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}