{
  "hash": "6c907e245a87300226c881c2c98e5998",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Basic Filtering\nfreeze: auto\n---\n\n\n\n\nHere we apply broad filters for missing details, time, space, and species. \nWe'll omit runs missing deployment information for tags and receivers, \nruns which occur during times we're not interested in, and runs which occur\nfor species/receiver pairs which are not within a particular species' range \n(ranges were determined in [Range Maps](03_range_maps.html)), also omitting \nspecies we're not interested in.\n\nThe idea is to reduce the size of the data we're working with as much as possible\nbefore we get into the fine details of assessing data quality.\n\nHowever, we don't want to simply delete records in our original data because\n\n- we're working with data which may need to be updated\n- we can't go back if we change our criteria\n\nSo we will create lists of all the run/tagID combinations *to be removed*,\nand we'll store these as a new dataset.\n\nWhen we want to calculate our final summaries, we can apply these filters \nin the last step *before* `collect()`ing (flattening) the parquet data files. \n\n## Setup\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"XX_setup.R\")\n\nrecvs <- read_csv(\"Data/Datasets/receivers.csv\")\nruns <- open_dataset(\"Data/Datasets/runs\", format = \"feather\")\n```\n:::\n\n\n## Non-deployments\n\nBoth tags and receivers have device ids and deployment ids. \nDeployments are associated with a particular device (tag or receiver) \nbeing deployed at a certain time. \n\nMany erroneous runs are associated with a tag at a time\nin which that tag was not recorded as deployed. \n\nFunnily enough this can also occur with receivers where the run occurs at a time\nwhere the associated receiver is not recorded as deployed.\n\nThis could occur for several reasons:\n\n- The metadata is incorrect and the tag/receiver was, in fact deployed at that time\n- This is false positive recording of the tag\n- This is non-trustworthy receiver data, which may have been collecting during \n  testing or installation\n\nAs we cannot be sure which is correct, for now we will omit those runs.\n\n:::{.panel-tabset}\n\n### Create filter\nIn our custom `runs` tables, any run/tag combination with missing a `tagDeployID` \nor a `recvDeployID` did not actually have a record of the tag/receiver being deployed at that time.\n\n:::{.callout-tip}\n#### `speciesID` vs. `tagDeployID`\nTechnically we should omit those without a tagDeployID, however, looking at the\nrecords which *have* a tagDeployID but do *not have* a speciesID shows that \nthey are all test tags, so we'll go ahead and just remove all records missing\na speciesID.\n\nSee the \"Explore - Tags\" panel for this exploration\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_deps <- filter(runs, is.na(speciesID) | is.na(recvDeployID)) |>\n  collect()\n```\n:::\n\n\n### Explore - Tags\n\nTo be sure that we're not missing things, we'll explore what is removed if\nwe use `tagDeployID` rather than `speciesID` (as we could conceivably have\ntags with a deploy id but not species ids).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_tag_dep_check <- filter(runs, is.na(tagDeployID))\n```\n:::\n\n\n\nFor example, in this project for this tag, we have no species ids for a series\nof runs. \n\n::: {.cell}\n\n```{.r .cell-code}\nno_tag_dep_check |>\n  select(tagID, tagDeployID, speciesID, tsBegin, tsEnd, motusFilter) |>\n  filter(tagID == 63138) |>\n  collect_ts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 301 × 6\n   tagID tagDeployID speciesID tsBegin             tsEnd              \n   <int>       <int>     <int> <dttm>              <dttm>             \n 1 63138          NA        NA 2022-01-15 10:27:31 2022-01-15 10:28:51\n 2 63138          NA        NA 2022-01-16 04:26:10 2022-01-16 04:26:50\n 3 63138          NA        NA 2022-01-27 01:22:06 2022-01-27 01:22:45\n 4 63138          NA        NA 2022-04-11 20:25:47 2022-04-11 20:27:07\n 5 63138          NA        NA 2022-04-02 21:10:25 2022-04-02 21:11:45\n 6 63138          NA        NA 2022-05-30 21:39:44 2022-05-30 21:41:04\n 7 63138          NA        NA 2022-06-02 22:34:33 2022-06-02 22:35:53\n 8 63138          NA        NA 2022-02-14 19:55:01 2022-02-14 19:55:41\n 9 63138          NA        NA 2022-05-01 01:58:15 2022-05-01 01:59:34\n10 63138          NA        NA 2022-07-01 10:04:21 2022-07-01 10:05:41\n# ℹ 291 more rows\n# ℹ 1 more variable: motusFilter <dbl>\n```\n\n\n:::\n:::\n\n\nNote that the `motusFilter` is also 0, indicating that they are likely false positives\nbased on other metrics as well.\n\nNow if we look at the tag deployment dates for that tag, we see that these\nruns occurred even before the tag was deployed, further indicating that they \nare false positives.\n\n::: {.cell}\n\n```{.r .cell-code}\nruns |>\n  filter(tagID == 63138) |>\n  select(tagID, tagDeployID,  tsStartTag, tsEndTag, speciesID) |>\n  distinct() |>\n  collect_ts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  tagID tagDeployID tsStartTag          tsEndTag            speciesID\n  <int>       <int> <dttm>              <dttm>                  <int>\n1 63138          NA NA                  NA                         NA\n2 63138       52117 2023-11-10 17:15:00 2025-08-10 17:15:00     19060\n```\n\n\n:::\n:::\n\n\nHowever, just because we have a tagDeployID, it doesn't necessarily mean we\nhave a speciesID.\n\nBut in all cases where there *is* a tagDeployID but there *is not* a speciesID, \nit's because the tag is a test tag (`test = 1`). \n\n::: {.cell}\n\n```{.r .cell-code}\nruns |> \n  filter(!is.na(tagDeployID), is.na(speciesID)) |>\n  select(tagID, tagDeployID, test) |>\n  distinct() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   tagID tagDeployID  test\n   <int>       <int> <int>\n 1 23608       12511     1\n 2 26315       16538     1\n 3 26448       13848     1\n 4 52917       32346     1\n 5 68906       42671     1\n 6 74330       45876     1\n 7 74328       45833     1\n 8 74328       45874     1\n 9 74331       45877     1\n10 74329       45875     1\n11 52918       33943     1\n12 64024       38571     1\n13 68914       42527     1\n```\n\n\n:::\n:::\n\n\nTherefore, we can actually remove all records with missing species ids without worry.\n\n\n### Explore - Receivers\n\nFor example, in this project (484) for this receiver device ID (3071), \nwe have no deployment ids (`recvDeployID`) for a series of runs. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(runs, is.na(recvDeployID)) |>\n  select(proj_id, recvDeployID, recvDeviceID) |>\n  distinct() |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 501 × 3\n   proj_id recvDeployID recvDeviceID\n     <int>        <int>        <int>\n 1     364           NA          559\n 2     364           NA         3071\n 3     364           NA         3179\n 4     364           NA         3180\n 5     364           NA         2541\n 6     364           NA         3207\n 7     364           NA         3357\n 8     364           NA         3333\n 9     364           NA          514\n10     168           NA         1882\n# ℹ 491 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nfilter(runs, is.na(recvDeployID)) |>\n  filter(proj_id == 484, recvDeviceID == 3071) |>\n  select(proj_id, runID, recvDeployID, recvDeviceID, tagDeployID) |>\n  collect_ts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 5\n   proj_id     runID recvDeployID recvDeviceID tagDeployID\n     <int>     <int>        <int>        <int>       <int>\n 1     484 540827863           NA         3071       41246\n 2     484 540827867           NA         3071       41246\n 3     484 540827898           NA         3071       41246\n 4     484 540827900           NA         3071       41246\n 5     484 540827914           NA         3071       41246\n 6     484 540827956           NA         3071       41246\n 7     484 540827975           NA         3071       41243\n 8     484 540827979           NA         3071       41246\n 9     484 540827997           NA         3071       41243\n10     484 540828021           NA         3071       41246\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\nNow if we look at the receiver deployment dates for that device, we see that these\nruns occurred before the receiver was deployed, although not that much earlier. \n\nPerhaps these are semi-legitimate runs, which were detected when testing and \ninstalling the receiver.\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(dbs[[\"484\"]], \"recvDeps\") |>\n  filter(deviceID == \"3071\") |>\n  select(deviceID, deployID, projectID, tsStart, tsEnd, status) |>\n  collect_ts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  deviceID deployID projectID tsStart             tsEnd  status\n     <int>    <int>     <int> <dttm>              <dttm> <chr> \n1     3071     9150       354 2022-10-18 18:37:00 NA     active\n```\n\n\n:::\n:::\n\n:::\n\n## Time\n\nIn this filter, we omit times of year that don't apply to our study.\nThis is the easiest filter to apply as it doesn't rely on metadata or other variables.\n\n**Which dates do we keep?**\n\n- Fall and Spring migration\n- August - December & February - July\n\n:::{.panel-tabset}\n\n### Create filter\nGet all runs that are NOT within these dates (Jan, July, Dec)\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_time <- runs |>\n  filter(monthBegin %in% c(1, 7, 12)) |>\n  collect()\n```\n:::\n\n\n### Example of the data omitted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- runs |>\n  filter(proj_id == 464) |>\n  mutate(probability = if_else(monthBegin %in% c(1, 7, 12), 0, 1)) |>\n  select(runID, tagID, tsBegin, probability, timeBegin) |>\n  collect()\n\nggplot(data = d, aes(x = timeBegin, y = factor(tagID), colour = factor(probability))) +\n  theme_bw() +\n  geom_point() +\n  scale_color_viridis_d(end = 0.8) +\n  labs(caption = \"Probability of 0 is data omitted by the filter\")\n```\n\n::: {.cell-output-display}\n![](04_basic_filters_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n:::\n\n## Space\n\nHere we identify runs which are *not* associated with appropriate stations as determined by\noverlap with a species range map ([Range Maps](03_range_maps.html)).\n\nThese are runs associated with a species which is unlikely to be found at that\nstation and can therefore be assumed to be false positives.\n\nNote that this step *also* omits species we're not interested in, as they are\nnot included in the list of species ranges and receivers.\n\n:::{.panel-tabset}\n\n\n### Create filter\n\nFirst we'll add the master list of whether or not a species is in range for each \nreceiver deployment.\n\n::: {.cell}\n\n```{.r .cell-code}\nrs <- recvs |>\n  mutate(speciesID = as.integer(id), \n         recvDeployID = as.integer(deployID)) |>\n  filter(in_range) |>\n  select(speciesID, recvDeployID, in_range)\n```\n:::\n\n\nNow, get all runs which are NOT in range given the species and the receiver deployment.\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_space <- runs |>\n  left_join(rs, by = c(\"recvDeployID\", \"speciesID\")) |>\n  filter(is.na(in_range)) |>\n  select(-\"in_range\") |>\n  collect()\n```\n:::\n\n\n\n### Check filter values\n\nMany of these omitted are omitted because they are missing the speciesID or the\nrecevDeployID (which is already accounted for the the [Non-deployments](#non-depoloyments) \nsection above.\n\nHowever, let's take a look at the remaining ones to check.\n\nHmm, most of these are poor quality runs (i.e. the `motusFilter` is 0). \nSo this is a good sign that these are indeed false positives which should be \nomitted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise_space |> \n  filter(!is.na(speciesID), !is.na(recvDeployID)) |>\n  count(proj_id, motusFilter) |>\n  collect() |>\n  gt() |>\n  gt_theme()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"qdnmloaykv\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#qdnmloaykv table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#qdnmloaykv thead, #qdnmloaykv tbody, #qdnmloaykv tfoot, #qdnmloaykv tr, #qdnmloaykv td, #qdnmloaykv th {\n  border-style: none;\n}\n\n#qdnmloaykv p {\n  margin: 0;\n  padding: 0;\n}\n\n#qdnmloaykv .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 3px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#qdnmloaykv .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#qdnmloaykv .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#qdnmloaykv .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 3px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: bold;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#qdnmloaykv .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: bold;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#qdnmloaykv .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#qdnmloaykv .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#qdnmloaykv .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 3px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#qdnmloaykv .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#qdnmloaykv .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#qdnmloaykv .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#qdnmloaykv .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#qdnmloaykv .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#qdnmloaykv .gt_row {\n  padding-top: 7px;\n  padding-bottom: 7px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#qdnmloaykv .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qdnmloaykv .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#qdnmloaykv .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#qdnmloaykv .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#qdnmloaykv .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qdnmloaykv .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#qdnmloaykv .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qdnmloaykv .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#qdnmloaykv .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qdnmloaykv .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qdnmloaykv .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qdnmloaykv .gt_left {\n  text-align: left;\n}\n\n#qdnmloaykv .gt_center {\n  text-align: center;\n}\n\n#qdnmloaykv .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#qdnmloaykv .gt_font_normal {\n  font-weight: normal;\n}\n\n#qdnmloaykv .gt_font_bold {\n  font-weight: bold;\n}\n\n#qdnmloaykv .gt_font_italic {\n  font-style: italic;\n}\n\n#qdnmloaykv .gt_super {\n  font-size: 65%;\n}\n\n#qdnmloaykv .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#qdnmloaykv .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#qdnmloaykv .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#qdnmloaykv .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#qdnmloaykv .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#qdnmloaykv .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#qdnmloaykv .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"proj_id\">proj_id</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"motusFilter\">motusFilter</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n\">n</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">168</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">685</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">352</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1574</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">352</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">11</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">364</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1866</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">364</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">275</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">373</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">72</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">393</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">18134</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">393</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">68</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">417</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10861</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">417</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">8</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">464</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1536</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">464</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">484</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">28156</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">484</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">76</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">515</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">389</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">515</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">551</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">1700</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">551</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">1</td>\n<td headers=\"n\" class=\"gt_row gt_right\">5</td></tr>\n    <tr><td headers=\"proj_id\" class=\"gt_row gt_right\">607</td>\n<td headers=\"motusFilter\" class=\"gt_row gt_right\">0</td>\n<td headers=\"n\" class=\"gt_row gt_right\">95</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\nLet's take a closer look at one species in one project.\n\nThere is quite possibly a lot of noise (see the amount of scatter in the `motusFilter = 0` \ncategory. And clearly this individual (Spotted Towhee) had a home base in \nsouthern BC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nns <- noise_space |> \n  filter(proj_id == 484, speciesID == 18550) |>\n  select(\"runID\", \"tagID\") |>\n  mutate(in_range = 0)\n\ncoords <- tbl(dbs[[\"484\"]], \"recvDeps\") |> \n  select(\"deployID\", \"latitude\", \"longitude\") |> \n  collect()\n\nrn <- filter(runs, proj_id == 484, speciesID == 18550) |>\n  left_join(coords, by = c(\"recvDeployID\" = \"deployID\")) |>\n  left_join(ns, by = c(\"runID\", \"tagID\")) |>\n  filter(!is.na(latitude), !is.na(longitude)) |>\n  select(motusFilter, tagDeployID, tsBegin, tsEnd, in_range, latitude, longitude) |>\n  collect() |>\n  mutate(in_range = factor(replace_na(in_range, 1)))\n\nmap <- ne_countries(country = c(\"Canada\", \"United States of America\"), returnclass = \"sf\")\n\nrn_sf_cnt <- rn |>\n  summarize(n = n(), .by = c(\"motusFilter\", \"in_range\", \"latitude\", \"longitude\")) |> \n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326)\n  \nggplot(rn_sf_cnt) +\n  geom_sf(data = map) +\n  geom_sf(aes(colour = in_range, size = n)) +\n  facet_wrap(~motusFilter)\n```\n\n::: {.cell-output-display}\n![](04_basic_filters_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Duplicate runIDs\n\nDouble check that there are no duplicate runIDs, which can happen when joining\nall the data together if we don't account for duplicate/overlapping receiver/tag \ndeployments. \n\nAdditionally there are some duplicates based on the same runID in different batches...\nThis occurs in `allruns` too, so isn't an artifact of the custom joins, but still\nnot idea. \n\nThese *should* have been dealt with in `custom_runs()` but just in case, we'll\nverify here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nruns |>\n  count(runID) |>\n  filter(n > 1) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 2\n# ℹ 2 variables: runID <int>, n <int>\n```\n\n\n:::\n:::\n\n\nOkay, good, there are zero duplicates (zero rows).\n\n\n## Looking at the filters\n\nFirst we'll combine and collect the 'bad' runs.\n\n::: {.cell}\n\n```{.r .cell-code}\nnoise <- bind_rows(no_deps, noise_time, noise_space) |>\n  distinct()\n```\n:::\n\n\n\nNext we'll take a look at how this compares to the motusFilter\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(runs, proj_id, motusFilter) |>\n  filter(proj_id == 484) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  proj_id motusFilter      n\n    <int>       <dbl>  <int>\n1     484           0 492931\n2     484           1 601907\n```\n\n\n:::\n\n```{.r .cell-code}\nanti_join(runs, noise, by = c(\"runID\", \"tagDeployID\", \"recvDeployID\")) |>\n  filter(proj_id == 484) |>\n  count(proj_id, motusFilter) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  proj_id motusFilter      n\n    <int>       <dbl>  <int>\n1     484           0 336867\n2     484           1 429134\n```\n\n\n:::\n:::\n\n\nThere are still many 'bad' data according to the motusFilter... perhaps we should\nuse that as well, or see what happens after we do the next stage of fine scale\nfiltering.\n\n## Saving filters\n\nWe'll save the 'bad data' for use in the next steps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_feather(noise, sink = \"Data/Datasets/noise_runs.feather\")\n```\n:::\n\n\n## Wrap up\nDisconnect from the databases\n\n::: {.cell}\n\n```{.r .cell-code}\nwalk(dbs, dbDisconnect)\n```\n:::\n\n\n## Reproducibility\n\n\n:::{.callout-note collapse=true}\n### Session Info\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.3 (2024-02-29)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language en_CA:en\n collate  en_CA.UTF-8\n ctype    en_CA.UTF-8\n tz       America/Winnipeg\n date     2024-03-08\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package       * version  date (UTC) lib source\n arrow         * 13.0.0.1 2023-09-22 [1] CRAN (R 4.3.1)\n assertr       * 3.0.0    2022-11-05 [1] CRAN (R 4.3.0)\n assertthat      0.2.1    2019-03-21 [1] CRAN (R 4.3.0)\n bit             4.0.5    2022-11-15 [1] CRAN (R 4.3.0)\n bit64           4.0.5    2020-08-30 [1] CRAN (R 4.3.0)\n blob            1.2.4    2023-03-17 [1] CRAN (R 4.3.0)\n cachem          1.0.8    2023-05-01 [1] CRAN (R 4.3.0)\n class           7.3-22   2023-05-03 [4] CRAN (R 4.3.1)\n classInt        0.4-10   2023-09-05 [1] CRAN (R 4.3.1)\n cli             3.6.2    2023-12-11 [1] CRAN (R 4.3.2)\n codetools       0.2-19   2023-02-01 [4] CRAN (R 4.2.2)\n colorspace      2.1-0    2023-01-23 [1] CRAN (R 4.3.0)\n crayon          1.5.2    2022-09-29 [1] CRAN (R 4.3.0)\n DBI           * 1.2.2    2024-02-16 [1] CRAN (R 4.3.2)\n dbplyr          2.4.0    2023-10-26 [1] CRAN (R 4.3.1)\n devtools        2.4.5    2022-10-11 [1] CRAN (R 4.3.0)\n digest          0.6.34   2024-01-11 [1] CRAN (R 4.3.2)\n dplyr         * 1.1.4    2023-11-17 [1] CRAN (R 4.3.2)\n e1071           1.7-14   2023-12-06 [1] CRAN (R 4.3.2)\n ebirdst       * 3.2022.2 2024-01-15 [1] Github (ebird/ebirdst@bd409c7)\n ellipsis        0.3.2    2021-04-29 [1] CRAN (R 4.3.0)\n evaluate        0.23     2023-11-01 [1] CRAN (R 4.3.1)\n fansi           1.0.6    2023-12-08 [1] CRAN (R 4.3.2)\n farver          2.1.1    2022-07-06 [1] CRAN (R 4.3.0)\n fastmap         1.1.1    2023-02-24 [1] CRAN (R 4.3.0)\n fs              1.6.3    2023-07-20 [1] CRAN (R 4.3.1)\n generics        0.1.3    2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2       * 3.5.0    2024-02-23 [1] CRAN (R 4.3.2)\n glue            1.7.0    2024-01-09 [1] CRAN (R 4.3.2)\n gt            * 0.10.0   2023-10-07 [1] CRAN (R 4.3.1)\n gtable          0.3.4    2023-08-21 [1] CRAN (R 4.3.1)\n hms             1.1.3    2023-03-21 [1] CRAN (R 4.3.0)\n htmltools       0.5.7    2023-11-03 [1] CRAN (R 4.3.1)\n htmlwidgets     1.6.4    2023-12-06 [1] CRAN (R 4.3.2)\n httpuv          1.6.14   2024-01-26 [1] CRAN (R 4.3.2)\n httr            1.4.7    2023-08-15 [1] CRAN (R 4.3.1)\n jsonlite        1.8.8    2023-12-04 [1] CRAN (R 4.3.2)\n KernSmooth      2.23-22  2023-07-10 [1] CRAN (R 4.3.1)\n knitr           1.45     2023-10-30 [1] CRAN (R 4.3.1)\n labeling        0.4.3    2023-08-29 [1] CRAN (R 4.3.1)\n later           1.3.2    2023-12-06 [1] CRAN (R 4.3.2)\n lifecycle       1.0.4    2023-11-07 [1] CRAN (R 4.3.2)\n lubridate     * 1.9.3    2023-09-27 [1] CRAN (R 4.3.1)\n magrittr        2.0.3    2022-03-30 [1] CRAN (R 4.3.0)\n memoise         2.0.1    2021-11-26 [1] CRAN (R 4.3.0)\n mime            0.12     2021-09-28 [1] CRAN (R 4.3.0)\n miniUI          0.1.1.1  2018-05-18 [1] CRAN (R 4.3.0)\n motus         * 6.1.0    2024-02-01 [1] Github (motuswts/motus@9d99ed5)\n munsell         0.5.0    2018-06-12 [1] CRAN (R 4.3.0)\n naturecounts    0.4.0    2023-06-20 [1] local\n pillar          1.9.0    2023-03-22 [1] CRAN (R 4.3.0)\n pkgbuild        1.4.3    2023-12-10 [1] CRAN (R 4.3.2)\n pkgconfig       2.0.3    2019-09-22 [1] CRAN (R 4.3.0)\n pkgload         1.3.3    2023-09-22 [1] CRAN (R 4.3.1)\n profvis         0.3.8    2023-05-02 [1] CRAN (R 4.3.1)\n promises        1.2.1    2023-08-10 [1] CRAN (R 4.3.1)\n proxy           0.4-27   2022-06-09 [1] CRAN (R 4.3.0)\n purrr         * 1.0.2    2023-08-10 [1] CRAN (R 4.3.1)\n R6              2.5.1    2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp            1.0.12   2024-01-09 [1] CRAN (R 4.3.2)\n readr         * 2.1.5    2024-01-10 [1] CRAN (R 4.3.2)\n remotes         2.4.2.1  2023-07-18 [1] CRAN (R 4.3.2)\n rlang           1.1.3    2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown       2.25     2023-09-18 [1] CRAN (R 4.3.1)\n rnaturalearth * 1.0.1    2023-12-15 [1] CRAN (R 4.3.2)\n RSQLite         2.3.5    2024-01-21 [1] CRAN (R 4.3.2)\n rstudioapi      0.15.0   2023-07-07 [1] CRAN (R 4.3.1)\n sass            0.4.8    2023-12-06 [1] CRAN (R 4.3.2)\n scales          1.3.0    2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo     1.2.2    2021-12-06 [1] CRAN (R 4.3.0)\n sf            * 1.0-15   2023-12-18 [1] CRAN (R 4.3.2)\n shiny           1.8.0    2023-11-17 [1] CRAN (R 4.3.2)\n stringi         1.8.3    2023-12-11 [1] CRAN (R 4.3.2)\n stringr       * 1.5.1    2023-11-14 [1] CRAN (R 4.3.2)\n terra           1.7-71   2024-01-31 [1] CRAN (R 4.3.2)\n tibble        * 3.2.1    2023-03-20 [1] CRAN (R 4.3.0)\n tidyr         * 1.3.1    2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect      1.2.0    2022-10-10 [1] CRAN (R 4.3.0)\n timechange      0.3.0    2024-01-18 [1] CRAN (R 4.3.2)\n tzdb            0.4.0    2023-05-12 [1] CRAN (R 4.3.1)\n units         * 0.8-5    2023-11-28 [1] CRAN (R 4.3.2)\n urlchecker      1.0.1    2021-11-30 [1] CRAN (R 4.3.0)\n usethis         2.2.2    2023-07-06 [1] CRAN (R 4.3.1)\n utf8            1.2.4    2023-10-22 [1] CRAN (R 4.3.1)\n vctrs           0.6.5    2023-12-01 [1] CRAN (R 4.3.2)\n viridisLite     0.4.2    2023-05-02 [1] CRAN (R 4.3.1)\n vroom           1.6.5    2023-12-05 [1] CRAN (R 4.3.2)\n withr           3.0.0    2024-01-16 [1] CRAN (R 4.3.2)\n xfun            0.42     2024-02-08 [1] CRAN (R 4.3.2)\n xml2            1.3.6    2023-12-04 [1] CRAN (R 4.3.2)\n xtable          1.8-4    2019-04-21 [1] CRAN (R 4.3.0)\n yaml            2.3.8    2023-12-11 [1] CRAN (R 4.3.2)\n\n [1] /home/steffi/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n:::\n\n",
    "supporting": [
      "04_basic_filters_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}