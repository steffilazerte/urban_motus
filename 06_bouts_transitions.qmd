---
title: "Bouts and Transitions"
freeze: auto
cache: true
---

Here we'll start collapsing the various runs into *bouts*. 
Then we'll use these bouts to assess transitions among receivers. 

However, there are some difficulties to consider:

- runs can overlap each other at the same station (as well as at separate stations)
- a run can be 4hrs long and overlap several other runs of shorter lengths
- this means we cannot simply compare runs on sequential lines 
- we'll need to iterate over runs until all runs have been collapsed as much as 
  possible

## Setup
```{r}
#| message: false
#| cache: false
source("XX_setup.R")

```

```{r}
#| include: false
# This allows us to define the functions in the XX_functions.R script, yet display 
# them in the rendered qmd file
knitr::read_chunk("XX_functions.R")
```

### Final filter application

Although we may wish to revisit the filters, for now we will apply the filters
collected in 04_basic_filters and 05_fine_filters. We will finish off with 
omitting any run with a length of 2 or less (this is a partial application of the 
`motusFilter`, so will likely still let false positives through).

:::{.panel-tabset}
#### Run
```{r}
runs <- load_runs()
```

#### Function
```{r load_runs}
```
:::

## Assumptions

In this script we'll be filtering out unlikely movements between stations (i.e. super fast birds).

This involves setting a *maximum allowable flight speed*, but also the *distance
from a station* in which a bird could conceivably be detected (otherwise we
might calculate super fast flight speeds simply because a bird was at the
detection limit of two stations and moved back and forth across the boundary).

We will assume the following limits for `max_flight_speed` and `max_tower_dist` (defined in `XX_setup.R`).

- Flight speed 72 m/s (`max_flight_speed`)
    - from Amie via Anderson et al. (2019) and Gronroos et al. (2012))
    - for shorebirds and with a buffer to avoid missing true flights, 
      so may be much faster than realistic for our birds (false positives)
- Tower distance 50 km (`max_tower_dist`)
    - from Amie, based on a 25km radius at each tower (so 50 between the two)
    - generous as most towers have a smaller detection range, but possible


```{r}
#| include: false
knitr::read_chunk("XX_setup.R")
```

```{r constants}
#| message: false
```

## Get distances among stations

We'll be looking at movements between stations and how quickly they occur.
So the first step is to calculate these distances and then our minimum 
time to travel between those two towers.

- Here we use the units package to handle the unit conversions for time (min) and distance (m)
  into speed (km/day)
- Units can then be compared with the `max_flight_speed` in units of `m/s`

We can't reliably assess speed over very small distances, because each tower
could presumably detect birds up to 25km away.

So we'll only consider fast birds when the distance between towers is greater than 
our buffer `max_tower_dist` and the flight speed is more than `max_flight_speed`

```{r}
recvs <- runs |>
  select(contains("recv")) |>
  distinct() |>
  drop_na()

recvs_sf <- recvs |>
  st_as_sf(coords = c("recvDeployLon", "recvDeployLat"), crs = 4326) |>
  arrange(recvDeployID)
  
dist <- st_distance(recvs_sf) |>
  as_tibble() |>
  mutate(recv_from = recvs_sf$recvDeployID) |>
  relocate(recv_from) |>
  rename_with(\(x) as.character(recvs_sf$recvDeployID), .cols = -1) |>
  pivot_longer(-recv_from, names_to = "recv_to", values_to = "next_dist") |>
  mutate(recv_to = as.integer(recv_to)) |>
  arrange(recv_from, recv_to) |>
  mutate(next_pair = paste0(recv_from, "_", recv_to),
         next_dist = set_units(next_dist, "km"),
         min_time = next_dist / max_flight_speed) |>
  #filter(next_dist > max_tower_dist) |>
  mutate(min_time = as.duration(as.numeric(set_units(min_time, "s"))))

write_rds(dist, "Data/Datasets/stn_dist.rds")
```

## Defining Station Groups

Some groups of stations are clustered very close to each other and birds will be
detected on all or most stations at the same time. This creates situations where
there are multiple simultaneous bouts on these stations and transitions between
these stations and others.

Here we identify station groups as groups of stations where each station in the
group is within `r max_tower_dist` of the others. 

Groups that are not completely inclusive (i.e. both stations Z and X are close
to station Y but not to each other) are not included (they would remain station
X, Y, Z, ungrouped).

:::{.panel-tabset}

### Run
```{r}
#| message: FALSE
plan(multisession, workers = 6) # Setup parallel

groups <- nest(runs, .by = c("tagDeployID")) |>
  mutate(data = future_map(data, \(x) {
    
    g <- dist |>
      filter(recv_from %in% unique(x$recvDeployID), 
             recv_to %in% unique(x$recvDeployID)) |>
      filter(recv_from != recv_to) |>
      summarize(
        stn_grouped_with = list(recv_to[next_dist < max_tower_dist]), 
        stn_group = paste0(sort(unique(c(recv_from, recv_to[next_dist < max_tower_dist]))), 
                           collapse = "-"),
        .by = "recv_from") |>
      # Only keep groups which are common across stations
      mutate(stn_group = if_else(n() > 1, stn_group[1], as.character(recv_from)[1]), 
             .by = "stn_group")
    
    left_join(x, g, by = c("recvDeployID" = "recv_from")) |>
      mutate(stn_group = if_else(is.na(stn_group), as.character(recvDeployID), stn_group))
  }, .progress = interactive())
  ) |>
  unnest(data)
```

### Output

```{r}
groups |>
  select(tagDeployID, recvDeployID, stn_group) |>
  distinct() |>
  slice(1:200) |>
  gt() |>
  gt_theme() |>
  tab_options(container.height = px(600),
              container.overflow.y = "auto") |>
  data_color(columns = stn_group, palette = "magma")
```

:::

## Summarize Bouts

Now we'll summarize the runs into detection bouts for each receiver for each 
individual. 

For example, if a bird was detected around a station for a total of 6 hours over
the course of 10 runs, we would collapse this down into one detection bout of
6 hours. 

We'll use a `bout_cutoff` of `r bout_cutoff` defined in `XX_setup.R`. So if
two runs at the same station are more than `r bout_cutoff` apart, we'll consider
those runs to belong to separate bouts.

Because there are overlapping runs we need to run the bout collapsing function
several times, first sorting by the run start time `timeBegin`, next by the 
run end time `timeEnd`. Then we try collapsing the bouts again, if we end up with
fewer rows of data (i.e. more runs were collapsed), we continue.

We stop once we cannot collapse any more runs together.

This step using the `furrr` package to run the iterations in parallel over
each `tagDeployID` and `recvDeployID`


```{r}
plan(multisession, workers = 6) # Setup parallel

bouts <- nest(groups, .by = c("tagDeployID", "stn_group")) |>
  mutate(data = future_map(data, \(x) {
    x1 <- create_bouts(arrange(x, timeBegin), bout_cutoff)
    x2 <- create_bouts(arrange(x1, timeEnd), bout_cutoff)

    # Keep running until no more overlaps to resolved    
    while(nrow(x1) != nrow(x2)) {
      x1 <- create_bouts(arrange(x2, timeBegin), bout_cutoff)
      x2 <- create_bouts(arrange(x1, timeEnd), bout_cutoff)
    }
    
    x2 |>
      mutate(n_runs = map_dbl(runID, n_distinct),
             len_min = map_dbl(len, min),
             len_max = map_dbl(len, max),
             n_ant = map_dbl(ant, n_distinct))
  }, .progress = interactive(), .options = furrr_options(seed = 123))) |>
  unnest(data) |>
  mutate(dateBegin = as_date(timeBegin),
         # Use first station in a group to define recvDeployID
         recvDeployID = as.numeric(str_split_i(stn_group, "-", i = 1)), 
         id = paste0(tagDeployID, "_", stn_group, "_", bout)) |>
  arrange(tagDeployID, timeBegin) |>
  left_join(recvs, by = "recvDeployID")
```

## Transitions

We'll identify transitions as movements between stations for an individual. 
As with collapsing bouts, we need to remember that bouts can overlap each other
at different stations. So if we compare line by line, we may miss overlaping 
bouts. 

To deal with this, we'll first identify all overlapping bouts.

:::{.panel-tabset}
### Run
```{r}
overlapping_bouts <- create_overlapping(bouts)
```

### Function
```{r create_overlapping}
```

### Output
```{r}
gt(overlapping_bouts) |>
  gt_theme() |>
  tab_options(container.height = px(600),
              container.overflow.y = "auto")
```

:::

Now we'll identify all transitions between stations (or groups of stations),
first looking for sequential transitions by the start time (`timeBegin`) then by
the end time (`timeEnd`). This ensures we don't miss transitions hidden by
overlapping bouts. (We'll omit the duplicates that this creates).

Finally we combine all these transitions (overlaps, plus `trans1` and `trans2`) and
add in the details regarding the start and end points.

:::{.panel-tabset}
### Run
```{r}
trans <- create_trans(bouts, overlapping_bouts, dist)
```

### Function
```{r create_trans}
```

### Output
First 200 rows
```{r}
trans |>
  slice(1:200) |>
  gt() |>
  gt_theme() |>
  tab_options(container.height = px(600),
              container.overflow.y = "auto")
```
:::

## Save Data

Now that we have our first set of bouts and transitions, we'll save this data
for use in the next step, finding and fixing problems. 

We'll use the RDS format (an R-format) to keep the units related to our distance
and speed columns.

```{r}
write_rds(trans, "Data/Datasets/transitions_initial.rds")
write_rds(bouts, "Data/Datasets/bouts_initial.rds")
```

